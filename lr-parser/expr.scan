/* Project:  COCKTAIL training
 * Descr:    LR parser for an expression language
 * Kind:     Scanner specification
 * Author:   Dr. Juergen Vollmer <Juergen.Vollmer@informatik-vollmer.de>
 * $Id: expr.scan,v 1.1 2007/06/01 11:37:53 vollmer draft $
 */

SCANNER expr_scan

EXPORT {
/* code to be put intp Scanner.h */
# include "Position.h"

/* Token Attributes.
 * For each token with user defined attributes, we need a typedef for the
 * token attributes.
 * LPP extracts the token-attribute declaration from the parser specification.
 * They are inserted here.
 */
INSERT tScanAttribute
}

GLOBAL {
/* code to be put into Scanner.c */
# include <stdlib.h>
# include "Errors.h"

/* Insert the routine computing "error-values" of attributes, in case the
 * parser decides during error repair to insert a token.
 */
INSERT ErrorAttribute
}

LOCAL {
/* user-defined local variables of the generated GetToken routine */
# define MAX_STRING_LEN 2048
char string[MAX_STRING_LEN];
int nesting = 0;
int len = 0;
}

DEFAULT {
  /* What happens if no scanner rule matches the input */
  MessageI ("Illegal character",
	    xxError, expr_scan_Attribute.Position,
	    xxCharacter, expr_scan_TokenPtr);
}

EOF {
  /* What should be done if the end-of-input-file has been reached? */

  /* E.g.: check hat strings and comments are closed. */
  switch (yyStartState) {
  case STD:
    /* ok */
    break;
  case COMMENT:
    Message ("unclosed C-comment",
	     xxError, expr_scan_Attribute.Position);
    break;
  case COMMENT2:
    Message ("unclosed Modula-comment",
	     xxError, expr_scan_Attribute.Position);
    break;
  default:
    Message ("OOPS: that should not happen!!",
	     xxFatal, expr_scan_Attribute.Position);
    break;
  }

  /* implicit: return the EofToken */
}

DEFINE /* some abbreviations */
  digit  = {0-9}       .
  letter = {a-z}|{A-Z} .
  identLetter = {a-z}|{A-Z}|"$"|"_".
  string = - {"\\\n\r\f} .

/* define start states, note STD is defined by default */
START COMMENT, COMMENT2, STRING

RULES

/* Integers */
#STD# {0-9}+ :
	{expr_scan_GetWord (string);
	 expr_scan_Attribute.int_const.Value = atol (string);
	 return int_const;
	}

/* Float numbers */
#STD# digit + "." digit * (("E"|"e") ("+"|"-") ? digit +) ? :
	{expr_scan_GetWord (string);
	 expr_scan_Attribute.float_const.Value = atof (string);
	 return float_const;
	}

#STD# < "--" ANY * > :
        { /* comment up to end of line, nothing to do */
        }

/* C-style comment */
#STD# "/*" :
	{ /**/
	  yyStart (COMMENT);
	}

#COMMENT# - {*\n\t} + | "*" :
        {}

#COMMENT# "*/" :
        {yyStart (STD);
	}

/* Modula2-style nested comment */
#STD,COMMENT2# "(*" :
	{ yyStart (COMMENT2);
	  nesting ++;
	}

#COMMENT2# - {*(\n\t} + | "*" | "(" :
        {}

#COMMENT2# "*)" :
        { nesting --;
	  if (nesting == 0) {
	    yyStart (STD);
	  }
	}

INSERT RULES #STD#

#STD# identLetter (identLetter | digit)*:
{
  return identifier;
}

#STD# \" :
	{ 
		yyStart(STRING);
		len = 0;
	}
#STRING# string* :
	{
		if(len + expr_scan_TokenLength+1 >= MAX_STRING_LEN){
			WritePosition(stderr, expr_scan_Attribute.Position);
			len = 0;
		}
		len += expr_scan_GetWord(&string[len]);
	}
#STRING# \" :
	{ 
		yyStart(STD);
		string[len] = '\0';
		expr_scan_Attribute.string_const.Value = malloc(len);
		strcpy(expr_scan_Attribute.string_const.Value, string);
		return string_const;
	}
#STRING# \\ n :
	{ 
		if(len + 1 >= MAX_STRING_LEN){
			WritePosition(stderr, expr_scan_Attribute.Position);
			fprintf(stderr, " tl\n");
		}
		string[len++] = '\n';
	}
#STRING# \\ :
	{
		if(len + 1 >= MAX_STRING_LEN){
			WritePosition(stderr, expr_scan_Attribute.Position);
			fprintf(stderr, " tl\n");
		}
		string[len++] = '\\';
	}