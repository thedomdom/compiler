/* Project:  COCKTAIL training
 * Descr:    LR parser for an expression language
 * Kind:     Parser specification (stub)
 * Author:   Dr. Juergen Vollmer <Juergen.Vollmer@informatik-vollmer.de>
 * $Id: expr.pars,v 1.4 2007/06/01 12:04:31 vollmer Exp vollmer $
 */

// Exercises:
//  - Add other arithmetic (binary - / **, unary + and -) operations.
//    Think about accosiactivity and operator precedence.
//  - Add identifiers as part of an expression to your grammer
//    extend the scanner.
//  - Add comma separated list of expressions. The list may be empty.
//   'expr_l' (expression list) should be the new grammar root symbol.
//  - Rewrite your grammar, so that precedences are used
//  - Add C-style statements (e.g. assignment, if, while and statement lists)
//    to your grammar. 'stmt' should be the new root symbol of your grammar
//  - Add those statements using Modula-style syntax.
//  - Add more test sources to test your grammar

SCANNER expr_scan

PARSER  expr_pars

GLOBAL {
 # include <stdio.h>
}

PREC LEFT '<' '>' '=='
     LEFT  '+' '-'
     LEFT  '*' '/'

RULE

root = sprache_x.

sprache_x = <
	= 'PROGRAM' identifier 'DECLARATIONS' decl_l codeblock
	.
> .

decl_l  = <
	= /* epsilon */
	.
	= decl_l decl ';'
	.
> . /* decl_l */

decl   = <
	= inout typ identifier
	.
> .

inout = <
	= 'INPUT'
	.
	= 'OUTPUT'
	.
	= /* epsilon */
	.
> .

typ = <
	= 'STRING'
	.
	= 'INT'
	.
	= 'FLOAT'
	.
> .

codeblock = <
	= 'BEGIN' anw_l 'END.'
	.
> .

anw_l  = <
	= /* epsilon */
	.
	= anw_l anw
	.
> . /* anw_l */

anw    = <
      = zuwe
      .
      = ifelse
      .
      = whiledo
      .
      = fordo
      .
> .


ifelse = <
	= 'IF' bed 'THEN' codeblock 'ENDIF.'
	.
	= 'IF' bed 'THEN' codeblock 'ELSE' codeblock 'ENDIF.'
	.
> .

whiledo = <
	= 'WHILE' bed 'DO' codeblock 'ENDWHILE.'
	.
> .


fordo   = <
	= 'FOR' bed ';' zuwe 'DO' codeblock 'ENDFOR.'
	.
> .

bed     = <
	= formel compop formel
	.
> .

compop  = <
	= '>'
	.
	= '<'
	.
	= '=='
	.
> .

zuwe    = <
	= identifier '=' konkat ';'
	.
	= identifier '=' formel ';'
	.
> .

konkat  = <
	= string_const 
	.
	= string_const '+' identifier
	.
> .

formel  = <
	= term
	.
	= formel '+' term
	.
	= formel '-' term
	.
> .

term    = <
	= negfak
	.
	= term '*' negfak
	.
	= term '/' negfak
	.
> .

negfak  = <
	= faktor
	.
	= '-' faktor
	.
>.

faktor  = <
	= int_const
	.
	= float_const
	.
	= identifier
	.
	= '(' formel ')'
	.
> .

/* Tokens */
int_const:    [Value: long]   {Value := 0;  } .
float_const:  [Value: double] {Value := 0.0;} .
string_const: [Value: tIdent] {Value := NoIdent;} .
identifier:   [Ident: tIdent] {Ident := NoIdent; } .
