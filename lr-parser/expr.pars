/* Project:  COCKTAIL training
 * Descr:    LR parser for an expression language
 * Kind:     Parser specification (stub)
 * Author:   Dr. Juergen Vollmer <Juergen.Vollmer@informatik-vollmer.de>
 * $Id: expr.pars,v 1.4 2007/06/01 12:04:31 vollmer Exp vollmer $
 */

// Exercises:
//  - Add other arithmetic (binary - / **, unary + and -) operations.
//    Think about accosiactivity and operator precedence.
//  - Add identifiers as part of an expression to your grammer
//    extend the scanner.
//  - Add comma separated list of expressions. The list may be empty.
//   'expr_l' (expression list) should be the new grammar root symbol.
//  - Rewrite your grammar, so that precedences are used
//  - Add C-style statements (e.g. assignment, if, while and statement lists)
//    to your grammar. 'stmt' should be the new root symbol of your grammar
//  - Add those statements using Modula-style syntax.
//  - Add more test sources to test your grammar

SCANNER expr_scan

PARSER  expr_pars

GLOBAL {
 # include <stdio.h>
}

RULE

root = expr.

expr = <
	= expr '+' term
	.
	= term
	.
> .

term = <
	= term '*' factor
	.
	= factor
	.
> .

factor = <
	= int_const
	.
	= float_const
	.
> .

/* Tokens */
int_const:    [Value: long]   {Value := 0;  } .
float_const:  [Value: double] {Value := 0.0;} .
