/* Project:  COCKTAIL training
 * Descr:    Build an Abstract Syntax Tree for an expression language
 * Kind:     AST specification
 * Author:   Prof. Dr. Juergen Vollmer <vollmer@dhbw-karlsruhe.de>
 * $Id: expr.ast.in,v 1.5 2010/04/26 13:59:30 vollmer Exp $
 */
MODULE abstract_syntax
		  /* AST-files may be separated into modules, contained in various files */

TREE   Tree  /* Name of the tree. Code is generated into files:
	      * `Tree.h', `expr_tree.c', and `yyexpr_tree.h'
              * In the further description we use the "generic" name `TREE'.
  	      */
IMPORT {
  /* The target-code of this section is copied into the generated .h file
   * before the declaration of the `typedef .... tTREE'
   */
} // IMPORT

EXPORT {
  /* The target-code of this section is copied into the generated .h file
   * after the declaration of the `typedef .... tTREE', but before
   * the declaration of the tree nodes struct's.
   */

  # include "Position.h"
  # include "Idents.h"

  /* tIdent's for function names */
  extern tIdent id_sin, id_cos, id_tan;
} // EXPORT

GLOBAL {
  /* The target-code of this section is copied into the generated .c file */
   tIdent id_sin, id_cos, id_tan;
} // GLOBAL

BEGIN {
  /* Target code to be placerd in the BeginTREE() function */
} // BEGIN

CLOSE {
  /* Target code to be placerd in the CloseTREE() function */
} // CLOSE

PROPERTY INPUT  /* all attributes are parameters of the generate the mXX() routines */

RULE  /* Here we define the node types */

program = [Pos: tPosition]
	  [Name: tIdent]
          Declaration: DECLS
          Body: ANWS
          .
          
DECLS = <
  no_decls	= /* end of list */
		.
  decls		= Next: DECLS REV
		  Decl: decl
		.
> .

decl	  = [Pos: tPosition]
	    [Name: tIdent]
	    InOut: type
	    Type: type
	  .
	  
type = [Type: char]
       .

ANWS = <
  no_anws	= /* end of list */
		.
  anws		= Next: ANWS REV
		  Anw: ANW
		.
> .
	  
ANW = <
  assignment = [Var_name: tIdent]
	       Value: EXPR
	       .
  ifelse =     Condition: bed
	       Body: ANW_L
	       Else: ANW_L
	       .
  fordo =      Condition: bed
	       Increment: assignment
	       Body: ANW_L
	       .
  Whiledo =    Condition: bed
	       Body: ANW_L
	       .
>.



EXPR = [Pos: tPosition] <
  int_const	= [Value: int].
  float_const   = [Value: double].
  identifier    = [Ident: tIdent].
  string_const  = [Value: tIdent].

   binary_expr	= [Op  : char ]     /* binary expressions */
		  Left : EXPR
		  Right: EXPR
		  .
		  
   unary_expr	= [Op  : char ]     /* unary expressions */
		  Arg  : EXPR
		  .  
>.

bed = 
  Value1: EXPR
  Value2: EXPR
  CompOp: type
.

END abstract_syntax
