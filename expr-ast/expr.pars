/* Project:  COCKTAIL training
 * Descr:    A simple pocket computer (scanner, parser, AST construction)
 * Kind:     Parser specification
 * Author:   Prof. Dr. Juergen Vollmer <vollmer@dhbw-karlsruhe.de>
 * $Id: expr.pars.in,v 1.6 2010/04/26 14:00:29 vollmer Exp $
 */

// Exercises:
//  - Add computation of the "Tree" Attribute to all grammar rules.
//  - Add grammar and tree construction rules to construct an AST for
//    "sin()", "cos()", and "tan()" (see expr.ast)
//    Add a grammar and evaluation rule for the constant    "pi"
//  - Add more test sources to test your grammar

SCANNER expr_scan

PARSER  expr_pars

GLOBAL {
 # include <stdio.h>
}

PREC LEFT '<' '>' '=='
     LEFT  '+' '-'
     LEFT  '*' '/'

RULE

root = sprache_x.

sprache_x = <
	= 'PROGRAM' identifier 'DECLARATIONS' decl_l codeblock
	.
> .

decl_l  = <
	= /* epsilon */
	.
	= decl_l decl ';'
	.
> . /* decl_l */

decl   = <
	= inout typ identifier
	.
> .

inout = <
	= 'INPUT'
	.
	= 'OUTPUT'
	.
	= /* epsilon */
	.
> .

typ = <
	= 'STRING'
	.
	= 'INT'
	.
	= 'FLOAT'
	.
> .

codeblock = <
	= 'BEGIN' anw_l 'END.'
	.
> .

anw_l  = <
	= /* epsilon */
	.
	= anw_l anw
	.
> . /* anw_l */

anw    = <
      = zuwe
      .
      = ifelse
      .
      = whiledo
      .
      = fordo
      .
> .


ifelse = <
	= 'IF' bed 'THEN' codeblock 'ENDIF.'
	.
	= 'IF' bed 'THEN' codeblock 'ELSE' codeblock 'ENDIF.'
	.
> .

whiledo = <
	= 'WHILE' bed 'DO' codeblock 'ENDWHILE.'
	.
> .


fordo   = <
	= 'FOR' bed ';' zuwe 'DO' codeblock 'ENDFOR.'
	.
> .

bed     = <
	= formel compop formel
	.
> .

compop  = <
	= '>'
	.
	= '<'
	.
	= '=='
	.
> .

zuwe    = <
	= identifier '=' formel ';'
	.
> .

formel  = <
	= term
	.
	= formel '+' term
	.
	= formel '-' term
	.
> .

term    = <
	= negfak
	.
	= term '*' negfak
	.
	= term '/' negfak
	.
> .

negfak  = <
	= faktor
	.
	= '-' faktor
	.
>.

faktor  = <
	= int_const
	.
	= float_const
	.
	= string_const
	.
	= identifier
	.
	= '(' formel ')'
	.
> .

/* Tokens */
int_const:    [Value: long]   {Value := 0;  } .
float_const:  [Value: double] {Value := 0.0;} .
string_const: [Value: tIdent] {Value := NoIdent;} .
identifier:   [Ident: tIdent] {Ident := NoIdent; } .
